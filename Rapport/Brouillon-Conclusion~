La détection et la reconnaissance d'individus et d'émotions peut s'effectuer à l'aide d'une multitude d'algorithmes résultant de dizaines d'années de recherche (LBPH, FisherFace, EigenFace, Réseaux neuronnaux, Modèle de Markov Cachés, ...) dont beaucoup demandent énormément de calculs. Certains ont une approche plus simple et sont facilement intégrables à un projet tel que LBPH à l'aide de la librairie OpenCV. L'application développée tout au long de ce TIPE nous montre que la reconnaissance faciale du conducteur peut être utile pour éviter un vol de voiture, même si la reconnaissance faciale n'est pas un facteur de sécurité fort. En effet, cette sécurité se contourne simplement en utilisant une photo du conducteur.

L'application permet aussi de détecter une personne endormie (seulement après quelques secondes) ou inattentive et permet donc d'éviter une conduite à l'aveugle. Par contre, l'application est très peu fiable pour la détection de la surprise ou de l'énervement. De plus, la surprise et l'énervement peuvent provenir d'une multitude de sources telles que la présence d'un bouchon, une sortie ratée, un enfant qui traverse au mauvais moment, etc. La détection des émotions n'est donc pas forcément la meilleure approche à avoir pour savoir comment la voiture doit réagir. De plus, cette détection peut être génée par de multiples facteurs tels que la luminosité, une caméra de mauvaise qualité, son placement (la tête peut-être cachée par le volant), etc.

Enfin, il faudrait plutôt prendre en compte le mouvement des points du visage plutôt que des seuils imprécis qui peuvent s'avérer faux avec la modification de l'environnement ou trop peu réactif (il faut parfois surjouer une émotion pour obtenir une détection, ce qui est inenvisageable dans une application réelle).

Cependant, l'application fonctionne mais nous pouvons l'améliorer de plusieurs façons. Tout d'abord, en reliant l'application directement à la voiture et non à des LEDs qui s'allument. Pour le choix des technologies associées, nous pouvons imaginer un programme plutôt en C ou C++ (le python étant plus lent) tirant mieux parti de la programmation parallèle afin d'effectuer des tâches simultanément. Le programme devrait tourner sur une architecture dédiée (système allégé type linux/BSD allégé). Enfin des algorithmes plus précis devraient être envisagés tels que le suivi des points du visage. Même si cette méthode nécessite bien plus de calculs, l'application serait plus précise. Pour pallier au problème de non information sur la cause de la surprise et de l'énervement de l'utilisateur, nous pouvons imaginer une amélioration du système actuel avec des radars et des caméras orientées vers l'extérieur de la voiture. Nous pouvons également reonforcer la détection d'un conducteur inattentif en générant des classifiers pour détecter lorsque le conducteur utilise son téléphone au volant. Enfin, la reconnaissance faciale du conducteur peut servir, en plus de la protection anti-vol à générer des profils de conduite (consommation d'essence, style de conduite, style de musique, ...).

Ce projet réalisé dans le cadre du TIPE nous a permis de gagner beaucoup de compétences. Nous avons appris à travailler en groupe avec des outils tels que git (pour le partage des ressources, des images et des sources de l'application) ainsi que l'utilisation de pad collaboratif pour rédiger à plusieurs facilement (Framapad). Nous avons aussi appris des méthodes de gestion de projets telles que la Check List (pour connaître les actions à réaliser), la méthode RACI (pour se répartir les tâches), le diagramme de Gantt (pour plannifier l'emploi du temps) ou la méthode Scrum (pour se diviser l'écriture de l'application). Par ailleurs, nous avons appris à programmer à l'aide de Python 2.7 (la norme python 3 est sortie, mais elle est encore mal supportée par OpenCV pour les méthodes de reconnaissance faciale) ainsi qu'à maitriser la bibliothèque OpenCV (pour les parties reconnaissance faciale et traitement d'images). Pour analyser facilement nos résultats donnés sous forme de log, nous avons utiliser le langage PHP. Enfin pour rédiger le rapport et générer les graphes, nous avons utiliser LaTeX.
